// Vitest Snapshot v1

exports[`oasComponentsToZod (basic) > Complex regex 1`] = `
"const MailAddress = z
  .string()
  .regex(
    new RegExp(
      "(?:[a-z0-9!#$%&'*+/=?^_\`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_\`{|}~-]+)*|\\"(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21\\\\x23-\\\\x5b\\\\x5d-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])*\\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21-\\\\x5a\\\\x53-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])+)\\\\])"
    )
  );
"
`;

exports[`oasComponentsToZod (basic) > Default 1`] = `
"import { z } from "zod";

const PrimitiveString = z.string();
const StringDefault = z.string().default("foo");
const StringDesc = z.string();
const StringMail = z.string().email();
const StringUrl = z.string().url();
const StringUuid = z.string().uuid();
const StringRange = z.string().min(10).max(20);
const StringPattern = z.string().regex(new RegExp("[a-z]+"));
const PrimitiveNumber = z.number();
const NumberMulitplier = z.number().multipleOf(2);
const NumberRange = z.number().gte(0).lte(100);
const NumberRangeExclusive = z.number().gt(0).lt(100);
const PrimitiveInteger = z.number().int();
const PrimitiveBoolean = z.boolean();
const NullablePrimitive = z.string().nullable();
const Array = z.array(z.string());
const ArrayRange = z.array(z.string()).min(1).max(10);
const ArrayLength = z.array(z.number()).length(3);
const NullableArray = z.array(z.number()).nullable();
const StringEnum = z.enum(["alpha", "beta"]);
const NumberEnum = z.union([z.literal(1.2), z.literal(34.5)]);
const IntegerEnum = z.union([z.literal(12), z.literal(345)]);
const NullableEnum = z.enum(["alpha", "beta"]).nullable();
const SingleEnum = z.literal(100);
const NonArrayEnum = z.literal(1000);
const TotallyObject = z.object({
  StringProp: z.string().optional(),
  NumberProp: z.number().optional(),
});
const MaybeObject = z.object({
  IntegerProp: z.number().int().optional(),
  StringArrayProp: z.array(z.string()).optional(),
});
const NullableObject = z
  .object({
    BooleanProp: z.boolean().optional(),
    StringEnumProp: z.enum(["delta", "gamma"]).optional(),
  })
  .nullable();
const AllOfObjects = z
  .object({ FooProp: z.string().optional(), BarProp: z.string().optional() })
  .merge(
    z.object({
      HogeProp: z.string().optional(),
      FugaProp: z.string().optional(),
    })
  );
const AllOfObjectRefs = TotallyObject.merge(MaybeObject);
const AllOfMixed = TotallyObject.merge(
  z.object({ FooProp: z.string().optional(), BarProp: z.string().optional() })
);
const AllOfInclNonObject = z.intersection(
  TotallyObject,
  z.intersection(PrimitiveString, MaybeObject)
);
const AllOfNone = z.undefined();
const AnyOfSingle = TotallyObject;
const AnyOfMultiple = z.undefined();
const AnyOfNone = z.undefined();
const OneOfSingle = TotallyObject;
const OneOfMultiple = z.union([TotallyObject, MaybeObject]);
const OneOfNone = z.undefined();

export const schemas = {
  PrimitiveString,
  StringDefault,
  StringDesc,
  StringMail,
  StringUrl,
  StringUuid,
  StringRange,
  StringPattern,
  PrimitiveNumber,
  NumberMulitplier,
  NumberRange,
  NumberRangeExclusive,
  PrimitiveInteger,
  PrimitiveBoolean,
  NullablePrimitive,
  Array,
  ArrayRange,
  ArrayLength,
  NullableArray,
  StringEnum,
  NumberEnum,
  IntegerEnum,
  NullableEnum,
  SingleEnum,
  NonArrayEnum,
  TotallyObject,
  MaybeObject,
  NullableObject,
  AllOfObjects,
  AllOfObjectRefs,
  AllOfMixed,
  AllOfInclNonObject,
  AllOfNone,
  AnyOfSingle,
  AnyOfMultiple,
  AnyOfNone,
  OneOfSingle,
  OneOfMultiple,
  OneOfNone,
};
"
`;

exports[`oasComponentsToZod (basic) > Disable format 1`] = `
"import { z } from 'zod';

const PrimitiveString = z.string();
const StringDefault = z.string().default("foo");
const StringDesc = z.string();
const StringMail = z.string().email();
const StringUrl = z.string().url();
const StringUuid = z.string().uuid();
const StringRange = z.string().min(10).max(20);
const StringPattern = z.string().regex(new RegExp("[a-z]+"));
const PrimitiveNumber = z.number();
const NumberMulitplier = z.number().multipleOf(2);
const NumberRange = z.number().gte(0).lte(100);
const NumberRangeExclusive = z.number().gt(0).lt(100);
const PrimitiveInteger = z.number().int();
const PrimitiveBoolean = z.boolean();
const NullablePrimitive = z.string().nullable();
const Array = z.array(z.string());
const ArrayRange = z.array(z.string()).min(1).max(10);
const ArrayLength = z.array(z.number()).length(3);
const NullableArray = z.array(z.number()).nullable();
const StringEnum = z.enum(["alpha","beta"]);
const NumberEnum = z.union([z.literal(1.2),z.literal(34.5)]);
const IntegerEnum = z.union([z.literal(12),z.literal(345)]);
const NullableEnum = z.enum(["alpha","beta"]).nullable();
const SingleEnum = z.literal(100);
const NonArrayEnum = z.literal(1000);
const TotallyObject = z.object({"StringProp":z.string().optional(),"NumberProp":z.number().optional()});
const MaybeObject = z.object({"IntegerProp":z.number().int().optional(),"StringArrayProp":z.array(z.string()).optional()});
const NullableObject = z.object({"BooleanProp":z.boolean().optional(),"StringEnumProp":z.enum(["delta","gamma"]).optional()}).nullable();
const AllOfObjects = z.object({"FooProp":z.string().optional(),"BarProp":z.string().optional()}).merge(z.object({"HogeProp":z.string().optional(),"FugaProp":z.string().optional()}));
const AllOfObjectRefs = TotallyObject.merge(MaybeObject);
const AllOfMixed = TotallyObject.merge(z.object({"FooProp":z.string().optional(),"BarProp":z.string().optional()}));
const AllOfInclNonObject = z.intersection(TotallyObject,z.intersection(PrimitiveString,MaybeObject));
const AllOfNone = z.undefined();
const AnyOfSingle = TotallyObject;
const AnyOfMultiple = z.undefined();
const AnyOfNone = z.undefined();
const OneOfSingle = TotallyObject;
const OneOfMultiple = z.union([TotallyObject,MaybeObject]);
const OneOfNone = z.undefined();

export const schemas = {
  PrimitiveString,
  StringDefault,
  StringDesc,
  StringMail,
  StringUrl,
  StringUuid,
  StringRange,
  StringPattern,
  PrimitiveNumber,
  NumberMulitplier,
  NumberRange,
  NumberRangeExclusive,
  PrimitiveInteger,
  PrimitiveBoolean,
  NullablePrimitive,
  Array,
  ArrayRange,
  ArrayLength,
  NullableArray,
  StringEnum,
  NumberEnum,
  IntegerEnum,
  NullableEnum,
  SingleEnum,
  NonArrayEnum,
  TotallyObject,
  MaybeObject,
  NullableObject,
  AllOfObjects,
  AllOfObjectRefs,
  AllOfMixed,
  AllOfInclNonObject,
  AllOfNone,
  AnyOfSingle,
  AnyOfMultiple,
  AnyOfNone,
  OneOfSingle,
  OneOfMultiple,
  OneOfNone
};
"
`;

exports[`oasComponentsToZod (basic) > Enable dereference 1`] = `
"const Comp1 = z.object({
  Prop1: z.string().optional(),
  Prop2: z.number().optional(),
});
const Comp2 = z.object({
  Prop1: z.string().optional(),
  Prop2: z.number().optional(),
});
"
`;

exports[`oasComponentsToZod (basic) > Wrap regex with anchors 1`] = `
"const MailAddress = z
  .string()
  .regex(
    new RegExp(
      "^(?:[a-z0-9!#$%&'*+/=?^_\`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_\`{|}~-]+)*|\\"(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21\\\\x23-\\\\x5b\\\\x5d-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])*\\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21-\\\\x5a\\\\x53-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])+)\\\\])$"
    )
  );
"
`;
